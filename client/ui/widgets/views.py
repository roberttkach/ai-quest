import json
from collections import defaultdict
from typing import Dict, Any

from rich.console import RenderableType, Group
from rich.columns import Columns
from rich.panel import Panel
from rich.rule import Rule
from rich.text import Text
from rich.tree import Tree


def render_status(data: Dict[str, Any]) -> RenderableType:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    player_data = data.get('player', {})
    location_data = data.get('location', {})

    player_text = Text.from_markup(
        f"[bold]–ò–º—è:[/] {player_data.get('name', 'N/A')}\n"
        f"[bold]–°—Ç–∞—Ç—É—Å:[/] {', '.join(player_data.get('status', ['N/A']))}\n"
        f"[bold]–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:[/] {', '.join(player_data.get('inventory', ['N/A']))}"
    )
    player_panel = Panel(
        player_text,
        title="[bold]üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂[/]",
        border_style="cyan",
        expand=True
    )

    location_text = Text.from_markup(
        f"[bold]–õ–æ–∫–∞—Ü–∏—è:[/] {location_data.get('name', 'N/A')}\n"
        f"[bold]–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –∑–¥–µ—Å—å:[/] {', '.join(location_data.get('players', [])) or '–Ω–∏–∫–æ–≥–æ'}\n"
        f"[bold]–û–ø–∏—Å–∞–Ω–∏–µ:[/] {location_data.get('description', 'N/A')}"
    )
    location_panel = Panel(
        location_text,
        title="[bold]üìç –û–∫—Ä—É–∂–µ–Ω–∏–µ[/]",
        border_style="yellow",
        expand=True
    )

    return Columns([player_panel, location_panel], expand=True, equal=True)


def render_help() -> RenderableType:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç –ø–∞–Ω–µ–ª—å —Å –ø–æ–º–æ—â—å—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = Text.from_markup(
        "  [bold cyan]/say [—Ç–µ–∫—Å—Ç][/]       - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏.\n"
        "  [bold cyan]/status[/]            - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏.\n"
        "  [bold cyan]/map[/]               - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π.\n"
        "  [bold cyan]/help[/]              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "  [bold cyan]/exit[/] –∏–ª–∏ [bold cyan]/quit[/]    - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã."
    )
    return Panel(
        help_text,
        title="[bold]‚ùì –ü–æ–º–æ—â—å[/]",
        border_style="blue",
        expand=False
    )


def render_map(data: Dict[str, Any]) -> RenderableType:
    """
    –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç—É –º–∏—Ä–∞, —Ä–∞–∑–¥–µ–ª—è—è –∏–µ—Ä–∞—Ä—Ö–∏—é (–¥–µ—Ä–µ–≤–æ) –∏ —Å–≤—è–∑–∏ (–≥—Ä–∞—Ñ).
    """
    locations = data.get('locations', [])
    connections = data.get('connections', [])
    current_loc_name = data.get('current_location')

    if not locations:
        return Panel(Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–µ.", style="dim"), title="[bold]üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ú–∏—Ä–∞[/]")

    loc_map = {loc['name']: loc for loc in locations}
    children_map = defaultdict(list)
    top_level_locs = []
    for loc in locations:
        if loc.get('parent'):
            children_map[loc['parent']].append(loc['name'])
        else:
            top_level_locs.append(loc['name'])

    hierarchy_tree = Tree("[bold]–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–∫–∞—Ü–∏–π (–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)[/bold]", guide_style="dim cyan")

    def build_hierarchy_tree(parent_node: Tree, loc_name: str):
        loc_data = loc_map.get(loc_name, {})

        player_count = len(loc_data.get('players', []))
        player_str = f" ({player_count} –∏–≥—Ä–æ–∫{'–∞' if 1 < player_count < 5 else '' if player_count == 1 else '–æ–≤'})" if player_count > 0 else ""

        label = Text(loc_name)
        if loc_name == current_loc_name:
            label.stylize("bold magenta")
            label.append(" (–í—ã –∑–¥–µ—Å—å)", style="magenta")

        label.append(player_str, style="dim")
        node = parent_node.add(label)

        for child_name in sorted(children_map.get(loc_name, [])):
            build_hierarchy_tree(node, child_name)

    for loc_name in sorted(top_level_locs):
        build_hierarchy_tree(hierarchy_tree, loc_name)

    connections_list = []
    if connections:
        for conn in sorted(connections):
            connections_list.append(f"  ‚Ä¢ [cyan]{conn[0]}[/] <--> [cyan]{conn[1]}[/]")
        connections_text = Text.from_markup("\n".join(connections_list))
    else:
        connections_text = Text("–ù–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.", style="dim")

    render_group = Group(
        hierarchy_tree,
        Rule("–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã", style="dim", characters="¬∑"),
        connections_text
    )

    return Panel(render_group, title="[bold yellow]:compass: –ö–∞—Ä—Ç–∞ –ú–∏—Ä–∞[/bold yellow]", border_style="yellow")
